generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(uuid())
  email     String    @unique
  name      String?
  password  String
  createdAt DateTime  @default(now())
  updatedAt DateTime? @default(now()) @updatedAt
  userRss   UserRss[]
  bundles   Bundle[]
}

model Rss {
    id            String    @id @default(uuid())
    type          String
    website       String
    title         String
    link          String?
    description   String?
    image         String?
    author        String?
    keywords      String?
    selector      String?   @default("")
    categoryId    String?
    official      Boolean?  @default(false)
    createdAt     DateTime  @default(now())
    updatedAt     DateTime? @default(now()) @updatedAt
    lastExecuteAt DateTime?
    frequency     String?   @default("hourly")
    tasks         Task[]
    feed          Feed[]
    userRss       UserRss[]
    category      Category? @relation(fields: [categoryId], references: [id])

    @@unique([type, website, selector])
}

model Feed {
    id          String    @id @default(uuid())
    title       String
    link        String
    image       String?
    description String?
    pubDate     DateTime?
    author      String?
    domain      String?
    createdAt   DateTime  @default(now())
    updatedAt   DateTime? @default(now()) @updatedAt
    rssId       String
    rss         Rss       @relation(fields: [rssId], references: [id], onDelete: Cascade)
}

model Task {
    id           String    @id @default(uuid())
    status       String    @default("pending")
    createAt     DateTime  @default(now())
    updatedAt    DateTime? @default(now()) @updatedAt
    count        Int
    rssId        String
    isRead       Boolean   @default(false)
    errorReason  String?
    successCount Int       @default(0)
    rss          Rss?      @relation(fields: [rssId], references: [id], onDelete: Cascade)
}

model Bundle {
    id          String    @id @default(uuid())
    title       String
    description String?
    userId      String
    pinned      Boolean   @default(false)
    createdAt   DateTime  @default(now())
    updatedAt   DateTime? @default(now()) @updatedAt
    userRss     UserRss[]
    user        User      @relation(fields: [userId], references: [id])
}

model UserRss {
    id          String    @id @default(uuid())
    userId      String
    rssId       String
    bundleId    String?
    title       String
    description String?
    createdAt   DateTime  @default(now())
    updatedAt   DateTime? @default(now()) @updatedAt
    user        User      @relation(fields: [userId], references: [id])
    rss         Rss       @relation(fields: [rssId], references: [id])
    bundle      Bundle?   @relation(fields: [bundleId], references: [id])
}

model Category {
    id        String    @id @default(uuid())
    name      String
    order     Int
    createdAt DateTime  @default(now())
    updatedAt DateTime? @default(now()) @updatedAt
    rssList   Rss[]
}

